syntax = "proto3";

package com.qapp.zeus;

message Establishment {
    string id = 1;
    string name = 2;
    optional string description = 3;
    optional string profileImage = 4;
    optional string coverImage = 5;
    string street = 6;
    string city = 7;
    string country = 8;
}

message Event {
    string id = 1;
    string name = 2;
    optional string description = 3;
    string start_date = 4;
    string end_date = 5;
    optional string image = 6;
    float price = 7;
    string establishment_id = 8;
    int32 maximumCapacity = 9;
}

message TicketPurchaseResult{
    string id = 1;
    string user_id = 2;
    string event_id = 3;
    float new_balance = 4;
}

service Zeus {
    rpc GetEstablishments(GetEstablishmentsRequest) returns (GetEstablishmentsResponse) {}
    rpc GetEvent(GetEventRequest) returns (Event) {}
    rpc GetEvents(GetEventsRequest) returns (GetEventsResponse) {}
    rpc GetEventsForEstablishment(GetEventsForEstablishmentRequest) returns (GetEventsResponse) {}
    rpc CreateEstablishment(CreateEstablishmentRequest) returns (Establishment) {}
    rpc CreateEvent(CreateEventRequest) returns (Event) {}
    rpc PurchaseTicket(PurchaseTicketRequest) returns (TicketPurchaseResult) {}
    rpc RefundTicket(RefundTicketRequest) returns (RefundTicketResponse) {}
    rpc SetEstablishmentRole(SetEstablishmentRoleRequest) returns (SetEstablishmentRoleResponse) {}
    rpc UpdateEstablishment(UpdateEstablishmentRequest) returns (Establishment) {}
    rpc UpdateEvent(UpdateEventRequest) returns (Event) {}
    rpc GetEstablishment(GetEstablishmentRequest) returns (Establishment) {}
    rpc GetEstablishmentForUser(GetEstablishmentsForUserRequest) returns (GetEstablishmentsResponse) {}
    rpc IsManagerOfEstablishment(IsManagerOfEstablishmentRequest) returns (IsManagerOfEstablishmentResponse) {}
    rpc RemoveEvent(RemoveEventRequest) returns (RemoveEventResponse) {}
}

message RemoveEventRequest {
    string updaterId = 1;
    string establishmentId = 2;
    string eventId = 3;
}

message RemoveEventResponse {
    string establishmentId = 1;
    string eventId = 2;
    bool removed = 3;
}

message IsManagerOfEstablishmentRequest {
    string userId = 1;
    string establishmentId = 2;
}

message IsManagerOfEstablishmentResponse {
    bool isManager = 1;
}

message GetEventRequest {
    string id = 1;
}

message GetEstablishmentsRequest {}

message GetEstablishmentsForUserRequest {
    string userId = 1;
}

message GetEventsRequest {}

message GetEventsForEstablishmentRequest {
    string establishmentId = 1;
}

message GetEstablishmentRequest {
    string id = 1;
}

message GetEstablishmentsResponse {
    repeated Establishment establishments = 1;
}

message CreateEstablishmentRequest{
    string name = 1;
    optional string description = 2;
    optional string profileImage = 3;
    optional string coverImage = 4;
    string street = 5;
    string city = 6;
    string country = 7;
    string ownerId = 8;
}

message SetEstablishmentRoleRequest {
    string updaterId = 1;
    string establishmentId = 2;
    string userId = 3;
    string role = 4;
}

message SetEstablishmentRoleResponse {
    string establishmentId = 1;
    string userId = 2;
    string role = 3;
}

message GetEventsResponse {
    repeated Event events = 1;
}

message CreateEventRequest {
    string name = 1;
    optional string description = 2;
    string start_date = 3;
    string end_data = 4;
    optional string image = 5;
    float price = 6;
    string establishmentId = 7;
    int32 maximumCapacity = 8;
    string ticketName = 9;
}

message PurchaseTicketRequest {
    string eventId = 1;
    string ticketId = 2;
    string userId = 3;
}

message RefundTicketRequest {
    string uuid = 1;
    string userId = 2;
}

message RefundTicketResponse {
    string uuid = 1;
    string userId = 2;
    bool revoked = 3;
}

message UpdateEstablishmentRequest {
    string updater_id = 1;
    string id = 2;
    optional string name = 3;
    optional string description = 4;
    optional string profileImage = 5;
    optional string coverImage = 6;
    optional string street = 7;
    optional string city = 8;
    optional string country = 9;
}

message UpdateEventRequest {
    string updaterId = 1;
    string uuid = 2;
    optional string name = 3;
    optional string description = 4;
    optional string start_date = 5;
    optional string end_date = 6;
    optional string image = 7;
    optional float price = 8;
    optional int32 maximumCapacity = 9;
}
